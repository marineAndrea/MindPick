************************************************************************************************************
       
            Upload article from profile:

UPLOAD ARTICLE:

if article does not exist
  check update all articles (for minComments value and pop idx)
  CREATE NEW ARTICLE

in any case
  UPDATE USERSARTICLES:
  update user by pushing article id into articles [] in user table

  UPDATE ARTICLEUPLOADERS:
  update article by pushing username into uploaders [] in article table

and send request to url and store html to db


************************************************************************************************************

            Comment article from document

COMMENT ARTICLE:
  UPDATE USERARTICLES

  UPDATE ARTICLECOMMENTATORS
  update article by pushing username into commentators [] in article table

  UPDATE ARTICLECOMMENTS: (set up default opinion to related)
  update article by pushing comment {articleID, username, opinion, source} into comments [] in article table

only if opinion provided

  GET CONTROVERSY INDEX
  UPDATE ARTICLE CONTR IDX
  check update all articles (for maxComments value and pop index)

  UPDATE USEROPINIONS
  update user by pushing comment: {articleID, opinion, controversyIdx} into opinions [] in user table

only if source provided
  UPLOAD ARTICLE


************************************************************************************************************

GET CONTROVERSY INDEX (article, scale)
on comment:
  get the nb of supported opinions for this article (nbPos)
  get the nb of unsupported opinions for this article (nbNeg)
  get leastContr: (nbPos + nbNeg)
  get contr: (nbPos - nbNeg)
  ctrIdx = {
    idx: Math.round((scale/ leastCtr) * (leastCtr - Math.abs(contr)));
    valence: 1 if contr > 0, -1 if contr < 0, 0 if contr === 0

GET POPULARITY INDEX (article, articles, scale)
on comment:
  loop through articles
    get the one that has the most comments (max)
    and the one that has the least comments (min)
    get the number of comments for the article (nb)
    idx = Math.round(1 + (((scale - 1) / (max - min)) * nb))

when get articles on profile
loop through user's articles
  if article commented by user ...
or 
update all dissonance idx on article's comments when article commented (after contr idx updated)

GET DISSONANCE INDEX (article, userAverageOpinion(-1 -> 1)) 
// improve this later by adding threshold : if above 0.5 or below -0.5
userValence = -1 or 1 or 0
articleValence = article.controversyIdx.valence (1, -1, or 0)
// add threshold as well using article.controversyIdx.idx (if < 5.5)
dissIdx = (userValence * articleValence) < 0 ?


************************************************************************************************************

UPDATE ALL ARTICLES POPULARITY
when comment added on an article changes the max comments
(the min comments should always be 0 to avoid looping through all articles)


************************************************************************************************************

When url added
if article is not in db
after saving article into db 
send request to website
and save data to db

when userc click on link
if data not stored yet
display message


404 
UrlParser = require(url)
parts = urlParser.parse(request.url)
parts.pathname



























